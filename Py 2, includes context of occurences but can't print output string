import heapq
from collections import Counter

class HuffmanNode:
    def __init__(self, char, freq):
        self.char = char
        self.freq = freq
        self.left = None
        self.right = None

    def __lt__(self, other):
        return self.freq < other.freq

def build_huffman_tree(data):
    frequency = Counter(data)
    priority_queue = [HuffmanNode(char, freq) for char, freq in frequency.items()]
    heapq.heapify(priority_queue)

    while len(priority_queue) > 1:
        left = heapq.heappop(priority_queue)
        right = heapq.heappop(priority_queue)

        internal_node = HuffmanNode(None, left.freq + right.freq)
        internal_node.left = left
        internal_node.right = right

        heapq.heappush(priority_queue, internal_node)

    return priority_queue[0]

def generate_huffman_codes(node, current_code="", code_dict=None):
    if code_dict is None:
        code_dict = {}

    if node is not None:
        if node.char is not None:
            code_dict[node.char] = current_code
        generate_huffman_codes(node.left, current_code + "0", code_dict)
        generate_huffman_codes(node.right, current_code + "1", code_dict)

    return code_dict

def build_huffman_table(data):
    root = build_huffman_tree(data)
    huffman_codes = generate_huffman_codes(root)

    # Pair characters to maximize efficiency
    final_codes = {}
    total_occurrences = Counter(data)

    # Sort characters by frequency in ascending order
    sorted_chars = sorted(total_occurrences.keys(), key=lambda x: total_occurrences[x])

    # Pair the least common characters with the most common characters
    for i in range(len(sorted_chars)//2):
        char_least_common = sorted_chars[i]
        char_most_common = sorted_chars[-(i+1)]
        pair_key = char_least_common + ',' + char_most_common
        final_codes[pair_key] = f"{total_occurrences[char_least_common]},{total_occurrences[char_most_common]}:{huffman_codes[char_least_common]}"

    # If the number of unique characters is odd, include the last character with its own code
    if len(sorted_chars) % 2 != 0:
        last_char = sorted_chars[len(sorted_chars)//2]
        final_codes[last_char] = f"{total_occurrences[last_char]}:{huffman_codes[last_char]}"

    return final_codes

if __name__ == "__main__":
    input_data = input("Enter the message you want to compress: ")
    
    huffman_table = build_huffman_table(input_data)
    
    print("Huffman Codes:")
    for chars, code in huffman_table.items():
        print(f"{chars}:{code}")
